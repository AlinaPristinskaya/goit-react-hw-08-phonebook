{"version":3,"sources":["components/Form/Form.module.css","components/PersonEditor/PersoneEditor.module.css","components/Filter/Filter.module.css","redux/contacts/contacts-selectors.js","redux/contacts/actions.js","redux/auth/auth-selectors.js","components/AppBar/Navigation.js","redux/auth/auth-operations.js","components/AppBar/UserMenu.js","components/AppBar/AuthNav.js","components/AppBar/AppBar.js","components/AppBar/LoginView.js","components/AppBar/RegisterView.js","components/Filter/Filter.js","redux/contacts/contacts-operations.js","components/Form/Form.js","components/PersonEditor/PersonEditor.js","components/AppBar/ContactsView.js","components/PrivateRoute.js","components/PublicRoute.js","App.js","redux/contacts/contactsReduser.js","redux/auth/auth-slice.js","redux/store.js","index.js"],"names":["module","exports","getFilter","state","contacts","filter","contactsSelector","getItems","items","getVisibleContacts","createSelector","entities","allContacts","normalizedFilter","toLowerCase","entitie","name","includes","addContactRequest","createAction","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","filterContacts","changeFilterContacts","fetchContactsRequest","fetchContactsSuccess","actions","fetchContactsError","selectors","getIsLoggedIn","auth","isLoggedIn","getIsAuthenticated","isAuthenticated","getUsername","user","getIsRefreshing","isRefreshing","styles","link","display","textDecoration","padding","fontWeight","color","activeLink","Navigation","useSelector","authSelectors","to","exact","style","activeStyle","axios","defaults","baseURL","token","headers","common","Authorization","register","createAsyncThunk","credentials","a","post","data","console","log","logIn","operations","logOut","getCurrentUser","_","thunkAPI","getState","persistedToken","rejectWithValue","get","container","alignItems","avatar","marginRight","UserMenu","dispatch","useDispatch","type","onClick","authOperations","AuthNav","header","justifyContent","borderBottom","connect","form","width","label","flexDirection","marginBottom","mapDispatchToProps","onLogin","useState","email","setEmail","password","setPassword","handleChange","target","value","onSubmit","e","preventDefault","autoComplete","onChange","onRegister","setName","className","s","input","fetchContacts","addContact","number","contact","id","uuidv4","then","catch","error","deleteContact","contactId","delete","contactSelector","setNumber","nameInputId","numberInputId","reset","find","alert","htmlFor","event","currentTarget","pattern","title","required","button","persons","onDeleteContacts","useEffect","length","stats","map","person","item","ContactsView","contactsOperations","PrivateRoute","children","routeProps","PublicRoute","restricted","shoulRedirect","formSubmitHandler","addContacts","deleteContacts","path","createReducer","payload","isLoading","filterReducer","combineReducers","authSlice","createSlice","initialState","extraReducers","fulfilled","action","pending","rejected","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","authPersistConfig","key","storage","whitelist","store","configureStore","reducer","persistReducer","authReducer","contactsReducer","devTools","process","storePersistor","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.01873eb7.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"Form_form__3Qb-D\",\"input\":\"Form_input__1Hfvc\",\"button\":\"Form_button__Rez1q\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"stats\":\"PersoneEditor_stats__2X8tI\",\"item\":\"PersoneEditor_item__WImEq\",\"button\":\"PersoneEditor_button__1diWP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"Filter_label__RnXeK\"};","import { createSelector } from \"@reduxjs/toolkit\";\r\n\r\n\r\nconst getItems=state=>state.contacts.items;\r\nconst getFilter=state=>state.contacts.filter;\r\nconst getContacts=state=>state.contacts.items.entities\r\n\r\n/* const getVisibleContacts=state=>{\r\n    const filter=getFilter(state);\r\n    const allContacts=getContacts(state);\r\n    const normalizedFilter = filter.toLowerCase();\r\n    return allContacts.filter(entitie=>entitie.name.toLowerCase().includes(normalizedFilter))\r\n  } */\r\n\r\n   const getVisibleContacts=createSelector([getFilter,getContacts],(filter,allContacts)=>{\r\n    const normalizedFilter = filter.toLowerCase();\r\n    return allContacts.filter(entitie=>entitie.name.toLowerCase().includes(normalizedFilter)) \r\n}) \r\n\r\nconst contactsSelector={getItems,getFilter,getVisibleContacts};\r\nexport default contactsSelector","\r\n\r\nimport { createAction} from '@reduxjs/toolkit'\r\n\r\nexport const addContactRequest = createAction('todos/addContactRequest');\r\nexport  const addContactSuccess=createAction('contacts/addContactSuccess')\r\nexport const addContactError = createAction('todos/addContactError');\r\n\r\nexport const deleteContactRequest = createAction('todos/deleteContactRequest');\r\nexport const deleteContactSuccess = createAction('todos/deleteContactSuccess');\r\nexport const deleteContactError = createAction('todos/deleteContactError');\r\n\r\n const filterContacts=createAction('contacts/filter')\r\n/* const filterContacts=value=>({\r\n    type:types.FILTER,\r\n    payload: value\r\n\r\n}); */\r\n const changeFilterContacts=createAction('contacts/changeFilter')\r\n/* const changeFilterContacts=value=>({\r\n    type:types.CHANGE_FILTER,\r\n    payload: value\r\n\r\n}); */\r\n const fetchContactsRequest=createAction('contacts/fetchContactsRequest')\r\n const fetchContactsSuccess=createAction('contacts/fetchContactsRequest')\r\n const fetchContactsError=createAction('contacts/fetchContactsRequest')\r\n\r\n const actions={fetchContactsError,\r\n    fetchContactsSuccess,\r\n    fetchContactsRequest,\r\n    changeFilterContacts,\r\n    filterContacts,\r\n    addContactRequest,\r\n    addContactSuccess,\r\n    addContactError,\r\n    deleteContactRequest,\r\n    deleteContactSuccess,\r\n    deleteContactError\r\n\r\n}\r\nexport default actions;","const getIsAuthenticated = state => state.auth.isAuthenticated;\r\n\r\nconst getUsername = state => state.auth.user.name;\r\nconst getIsLoggedIn=state=>state.auth.isLoggedIn;\r\nconst getIsRefreshing=state=>state.auth.isRefreshing\r\n\r\n\r\nconst selectors={\r\n    getIsLoggedIn,\r\n    getIsAuthenticated,\r\n    getUsername,\r\n    getIsRefreshing\r\n}\r\n\r\nexport default selectors ;","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { useSelector } from 'react-redux';\r\nimport  authSelectors from '../../redux/auth/auth-selectors';\r\n\r\nconst styles = {\r\n  link: {\r\n    display: 'inline-block',\r\n    textDecoration: 'none',\r\n    padding: 12,\r\n    fontWeight: 700,\r\n    color: '#2A363B',\r\n  },\r\n  activeLink: {\r\n    color: '#E84A5F',\r\n  },\r\n};\r\n\r\nfunction Navigation(){\r\n  const isLoggedIn=useSelector(authSelectors.getIsLoggedIn)\r\n  return(<nav>\r\n    {isLoggedIn && (\r\n      <NavLink to=\"/contacts\" exact style={styles.link} activeStyle={styles.activeLink}>\r\n        Телефонная книга   \r\n      </NavLink>\r\n      )}</nav>\r\n  )\r\n \r\n}\r\n\r\n\r\nexport default Navigation;\r\n","import { createAsyncThunk } from '@reduxjs/toolkit';\r\nimport axios from 'axios';\r\n\r\n\r\naxios.defaults.baseURL = 'https://connections-api.herokuapp.com';\r\n\r\nconst token = {\r\n  set(token) {\r\n    axios.defaults.headers.common.Authorization = `Bearer ${token}`;\r\n  },\r\n  unset() {\r\n    axios.defaults.headers.common.Authorization = '';\r\n  },\r\n};\r\n\r\n/*\r\n * POST @ /users/signup\r\n * body { name, email, password }\r\n *\r\n * После успешной регистрации добавляем токен в HTTP-заголовок\r\n */\r\nconst register = createAsyncThunk('auth/register', async credentials=>{\r\n  try {\r\n    const {data} = await axios.post('/users/signup', credentials);\r\n    token.set(data.token)\r\n    return data;\r\n    \r\n  } catch (error) {\r\n    console.log(error)\r\n  }\r\n} );\r\n\r\n  \r\n\r\n/*\r\n * POST @ /users/login\r\n * body:\r\n *    { email, password }\r\n *\r\n * После успешного логина добавляем токен в HTTP-заголовок\r\n */\r\nconst logIn= createAsyncThunk('auth/login', async credentials=>{\r\n\r\n  try {\r\n    const {data} = await axios.post('/users/login', credentials);\r\n    token.set(data.token)\r\n    return data;\r\n\r\n  } catch (error) {\r\n    console.log(error)\r\n  }\r\n});\r\n\r\n/*\r\n * POST @ /users/logout\r\n * headers:\r\n *    Authorization: Bearer token\r\n *\r\n * 1. После успешного логаута, удаляем токен из HTTP-заголовка\r\n */\r\nconst logOut =createAsyncThunk('auth/logout',async ()=>{\r\n  try {\r\n    await axios.post('/users/logout');\r\n\r\n    token.unset();\r\n    //dispatch(actions.logoutSuccess());\r\n  } catch (error) {\r\n    //dispatch(actions.logoutError(error.message));\r\n  }\r\n});\r\n\r\n/*\r\n * GET @ /users/current\r\n * headers:\r\n *    Authorization: Bearer token\r\n *\r\n * 1. Забираем токен из стейта через getState()\r\n * 2. Если токена нет, выходим не выполняя никаких операций\r\n * 3. Если токен есть, добавляет его в HTTP-заголовок и выполянем операцию\r\n */\r\nconst getCurrentUser=createAsyncThunk('users/current',async(_,thunkAPI)=>{\r\nconst state=thunkAPI.getState();\r\nconst persistedToken= state.auth.token;\r\nif (persistedToken===null){\r\n   return thunkAPI.rejectWithValue();\r\n}\r\ntoken.set(persistedToken);\r\ntry{\r\n  const {data} = await axios.get('/users/current');\r\n  console.log(data);\r\n  return data\r\n}catch(error){\r\n  console.log(error)\r\n}\r\n\r\n});\r\n\r\n /*  token.set(persistedToken);\r\n  dispatch(actions.getCurrentUserRequest());\r\n\r\n  try {\r\n    const response = await axios.get('/users/current');\r\n\r\n    dispatch(actions.getCurrentUserSuccess(response.data));\r\n  } catch (error) {\r\n    dispatch(actions.getCurrentUserError(error.message));\r\n  }\r\n; */\r\nconst operations={ register, logOut, logIn, getCurrentUser }\r\nexport default operations;","import React from 'react';\r\nimport {useDispatch, useSelector } from 'react-redux';\r\nimport authSelectors from '../../redux/auth/auth-selectors';\r\nimport authOperations from '../../redux/auth/auth-operations';\r\n//import defaultAvatar from './default-avatar.png';\r\n\r\nconst styles = {\r\n  container: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n  },\r\n  avatar: {\r\n    marginRight: 4,\r\n  },\r\n  name: {\r\n    fontWeight: 700,\r\n    marginRight: 12,\r\n  },\r\n};\r\n\r\nfunction UserMenu(){\r\n  const dispatch=useDispatch();\r\n  const name=useSelector(authSelectors.getUsername);\r\n return (<div style={styles.container}>\r\n    \r\n    <span style={styles.name}>Welcome, {name}</span>\r\n    <button type=\"button\" onClick={()=>dispatch(authOperations.logOut())\r\n    }>\r\n      Logout\r\n    </button>\r\n  </div>)\r\n}\r\n\r\nexport default UserMenu;\r\n","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst styles = {\r\n  link: {\r\n    display: 'inline-block',\r\n    textDecoration: 'none',\r\n    padding: 12,\r\n    fontWeight: 700,\r\n    color: '#2A363B',\r\n  },\r\n  activeLink: {\r\n    color: '#E84A5F',\r\n  },\r\n};\r\n\r\nconst AuthNav = () => (\r\n  <div>\r\n    <NavLink\r\n      to=\"/register\"\r\n      exact\r\n      style={styles.link}\r\n      activeStyle={styles.activeLink}\r\n    >\r\n      Регистрация\r\n    </NavLink>\r\n    <NavLink\r\n      to=\"/login\"\r\n      exact\r\n      style={styles.link}\r\n      activeStyle={styles.activeLink}\r\n    >\r\n      Логин\r\n    </NavLink>\r\n  </div>\r\n);\r\n\r\nexport default AuthNav;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Navigation from './Navigation';\r\nimport UserMenu from './UserMenu';\r\nimport AuthNav from './AuthNav';\r\nimport selectors from '../../redux/auth/auth-selectors';\r\nimport { useSelector } from 'react-redux';\r\n\r\nconst styles = {\r\n  header: {\r\n    display: 'flex',\r\n    justifyContent: 'space-between',\r\n    alignItems: 'center',\r\n    borderBottom: '1px solid #2A363B',\r\n  },\r\n};\r\n\r\nconst AppBar = () => {\r\n  const isLoggedIn=useSelector(selectors.getIsLoggedIn)\r\nreturn(\r\n  <header style={styles.header}>\r\n    <Navigation />\r\n  {isLoggedIn?<UserMenu />: <AuthNav />}\r\n    \r\n  </header>)\r\n};\r\n\r\n/* const mapStateToProps = state => ({\r\n  isAuthenticated: selectors.getIsAuthenticated(state),\r\n}); */\r\n\r\nexport default connect()(AppBar);\r\n","import React,{useState} from 'react';\r\nimport { connect, useDispatch } from 'react-redux';\r\nimport authOperations from '../../redux/auth/auth-operations';\r\n\r\nconst styles = {\r\n  form: {\r\n    width: 320,\r\n  },\r\n  label: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    marginBottom: 15,\r\n  },\r\n};\r\n\r\nfunction LoginView(){\r\n  const dispatch=useDispatch();\r\n  const [email,setEmail]=useState('');\r\n  const [password,setPassword]=useState('');\r\n\r\n  const handleChange=({target:{name,value}})=>{\r\n    switch(name){\r\n      case 'email':\r\n        return setEmail(value);\r\n      case 'password':\r\n        return setPassword(value);\r\n      default:\r\n        return;      \r\n    }\r\n  }\r\n\r\n  const handleSubmit=e=>{\r\n    e.preventDefault();\r\n    dispatch(authOperations.logIn({email,password}));\r\n    setEmail('');\r\n    setPassword('');\r\n  }\r\n\r\n  return (\r\n      <div>\r\n        <h1>Страница логина</h1>\r\n\r\n        <form\r\n          onSubmit={handleSubmit}\r\n          style={styles.form}\r\n          autoComplete=\"off\"\r\n        >\r\n          <label style={styles.label}>\r\n            Почта\r\n            <input\r\n              type=\"email\"\r\n              name=\"email\"\r\n              value={email}\r\n              onChange={handleChange}\r\n            />\r\n          </label>\r\n\r\n          <label style={styles.label}>\r\n            Пароль\r\n            <input\r\n              type=\"password\"\r\n              name=\"password\"\r\n              value={password}\r\n              onChange={handleChange}\r\n            />\r\n          </label>\r\n\r\n          <button type=\"submit\">Войти</button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n\r\n\r\nconst mapDispatchToProps = {\r\n  onLogin: authOperations.logIn,\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(LoginView);\r\n","import React, { useState } from 'react';\r\nimport { connect, useDispatch } from 'react-redux';\r\nimport authOperations from '../../redux/auth/auth-operations';\r\n\r\nconst styles = {\r\n  form: {\r\n    width: 320,\r\n  },\r\n  label: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    marginBottom: 15,\r\n  },\r\n};\r\n\r\nfunction RegisterView(){\r\n  const dispatch=useDispatch();\r\n  const [name,setName]=useState('');\r\n  const [email,setEmail]=useState('');\r\n  const [password,setPassword]=useState('');\r\n\r\n  const handleChange=({target:{name,value}})=>{\r\n    switch(name){\r\n      case 'name':\r\n        return setName(value);\r\n      case 'email':\r\n        return setEmail(value);\r\n      case 'password':\r\n        return setPassword(value);\r\n      default:\r\n        return;      \r\n    }\r\n  }\r\n const handleSubmit=e=>{\r\n   e.preventDefault();\r\n   dispatch(authOperations.register({name,email,password}));\r\n   setName('');\r\n   setEmail('');\r\n   setPassword('');\r\n }\r\n\r\n \r\n    return (\r\n      <div>\r\n        <h1>Страница регистрации</h1>\r\n\r\n        <form\r\n          onSubmit={handleSubmit}\r\n          autoComplete=\"off\"\r\n          style={styles.form}\r\n        >\r\n          <label style={styles.label}>\r\n            Имя\r\n            <input\r\n              type=\"text\"\r\n              name=\"name\"\r\n              value={name}\r\n              onChange={handleChange}\r\n            />\r\n          </label>\r\n\r\n          <label style={styles.label}>\r\n            Почта\r\n            <input\r\n              type=\"email\"\r\n              name=\"email\"\r\n              value={email}\r\n              onChange={handleChange}\r\n            />\r\n          </label>\r\n\r\n          <label style={styles.label}>\r\n            Пароль\r\n            <input\r\n              type=\"password\"\r\n              name=\"password\"\r\n              value={password}\r\n              onChange={handleChange}\r\n            />\r\n          </label>\r\n\r\n          <button type=\"submit\">Зарегистрироваться</button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n\r\n\r\nconst mapDispatchToProps = {\r\n  onRegister: authOperations.register,\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(RegisterView);\r\n","import React from 'react';\r\nimport s from './Filter.module.css'\r\nimport {connect} from 'react-redux'\r\nimport actions from '../../redux/contacts/actions'\r\nimport contactsSelector from '../../redux/contacts/contacts-selectors';\r\n\r\n\r\n\r\nconst Filter =({value,onChange})=>(\r\n  <label className={s.label}><b>Фильтр по имени</b><input className={\r\n    s.input\r\n  } type=\"Text\" value={value} onChange={onChange}/></label>\r\n\r\n);\r\nconst mapStateToProps=state=>({\r\n  value:contactsSelector.getFilter(state)\r\n}) \r\nconst mapDispatchToProps=dispatch=>({\r\n  onChange:e=>dispatch(actions.changeFilterContacts(e.target.value))\r\n})       \r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(Filter);","import a from '../contacts/actions'\r\nimport axios from 'axios'\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\n\r\naxios.defaults.baseURL = 'https://connections-api.herokuapp.com';\r\nconst fetchContacts = () => async dispatch => {\r\n  dispatch(a.fetchContactsRequest());\r\n  \r\n\r\n  try {\r\n    const { data } = await axios.get('/contacts');\r\n\r\n    dispatch(a.fetchContactsSuccess(data));\r\n  } catch (error) {\r\n    dispatch(a.fetchContactsError(error));\r\n  } }\r\n\r\n  const addContact = ({name,number}) => dispatch => {\r\n    const contact = {\r\n      id: uuidv4(),\r\n      name:name,\r\n      number:number,\r\n    };\r\n\r\n    \r\n\r\n    dispatch(a.addContactRequest());\r\n  \r\n    axios\r\n      .post('/contacts', contact)\r\n      .then(({ data }) => dispatch(a.addContactSuccess(data)))\r\n      .catch(error => dispatch(a.addContactError(error)));\r\n  \r\n    \r\n  };\r\n  \r\n  const deleteContact = contactId => dispatch => {\r\n    dispatch(a.deleteContactRequest());\r\n  \r\n    axios\r\n      .delete(`/contacts/${contactId}`)\r\n      .then(() => dispatch(a.deleteContactSuccess(contactId)))\r\n      .catch(error => dispatch(a.deleteContactError(error)));\r\n  };\r\n\r\nconst operations={fetchContacts,addContact,deleteContact}\r\n\r\nexport default operations;","import {useState} from 'react';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport s from './Form.module.css';\r\nimport {connect} from 'react-redux';\r\nimport operations from '../../redux/contacts/contacts-operations';\r\nimport contactSelector from '../../redux/contacts/contacts-selectors'\r\n\r\n\r\n\r\n\r\n\r\nfunction Form({onSubmit,entities}){\r\n  const [name,setName]=useState('');\r\n  const [number,setNumber]=useState('');\r\n\r\n  const nameInputId=uuidv4();\r\n  const numberInputId=uuidv4();\r\n\r\n  const handelChangeName=(event)=>{\r\n    const {value}=event.currentTarget;  \r\n    setName(value);\r\n  \r\n  }\r\n\r\n  const handelChangeNumber=(e)=>{\r\n    console.log(e);\r\n    const {value}=e.currentTarget;  \r\n    setNumber(value);\r\n\r\n  }\r\n\r\n    const handelSubmit=e=>{\r\n    e.preventDefault();\r\n    const user = entities.find(user => user.name === name);\r\n    if (!user){\r\n      onSubmit({name,number});\r\n    reset()\r\n\r\n    } else \r\n    alert (`${name} is already on contacts`)\r\n    reset()\r\n  }\r\n\r\n  const reset=()=>{\r\n      setName('');\r\n      setNumber('');\r\n  }\r\n\r\n  \r\n  return (\r\n    <>\r\n      <form className={s.form} onSubmit={handelSubmit}>\r\n        <label htmlFor={nameInputId}> Name </label>\r\n        <input className={s.input}\r\n              id={nameInputId}\r\n              onChange={handelChangeName}\r\n              value={name}\r\n              type=\"text\"\r\n              name=\"name\"\r\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n              title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n              required\r\n        />\r\n       <label htmlFor={numberInputId}> Number </label>\r\n       <input className={s.input}\r\n              id={numberInputId}\r\n              onChange={handelChangeNumber}\r\n              value={number}\r\n              type=\"tel\"\r\n              name=\"number\"\r\n              pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n              title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n              required\r\n       />\r\n       <button className={s.button}type=\"submit\">Add contact</button>\r\n    </form>\r\n\r\n</>\r\n);}\r\n\r\nconst mapStateToProps=state=>({\r\n  entities:contactSelector.getVisibleContacts(state)\r\n})\r\nconst mapDispatchToProps=dispatch=>({\r\n  \r\n  onSubmit:data=>dispatch(operations.addContact(data))\r\n})\r\n\r\n  export default connect(mapStateToProps,mapDispatchToProps)(Form);","\r\nimport s from './PersoneEditor.module.css';\r\nimport {connect, useDispatch} from 'react-redux';\r\n//import actions from '../../redux/contacts/actions';\r\nimport { useEffect } from 'react';\r\nimport operations from '../../redux/contacts/contacts-operations';\r\nimport contactsSelector from '../../redux/contacts/contacts-selectors';\r\n\r\n\r\n\r\nfunction PersonEditor({persons,onDeleteContacts}){\r\n  const dispatch=useDispatch();\r\n  \r\n  \r\n  useEffect(()=>{\r\n    dispatch(operations.fetchContacts())\r\n  },[dispatch]) \r\n\r\n   \r\n    return  (  <>\r\n      \r\n      <div>{persons.length? \r\n              <ul className={s.stats}>{persons.map((person)=>\r\n                <li className={s.item} key={person.id}>{person.name}:{person.number}\r\n                <button className={s.button}\r\n                    type=\"button\"\r\n                    onClick={() => onDeleteContacts(person.id)}>Удалить\r\n                </button>\r\n                </li>)}\r\n              </ul> : <p>No entries in the phone book</p>}\r\n            </div>  \r\n   </> )\r\n}\r\n\r\n\r\n\r\n const mapStateToProps=state=>({\r\n persons:contactsSelector.getVisibleContacts(state),\r\n})\r\n\r\n\r\nconst mapDispatchToProps=dispatch=>{\r\n  return{\r\n    onDeleteContacts:(id)=>dispatch(operations.deleteContact(id))\r\n  }\r\n}\r\n      \r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(PersonEditor);\r\n","import React, { useEffect } from 'react';\r\nimport { useDispatch} from 'react-redux';\r\nimport Filter from '../Filter/Filter';\r\nimport Form from '../Form/Form';\r\nimport PersonEditor from '../PersonEditor/PersonEditor';\r\n//import authSelectors from '../../redux/auth/auth-selectors';\r\nimport contactsOperations from '../../redux/contacts/contacts-operations'\r\n\r\nfunction ContactsView(){\r\n     const dispatch=useDispatch();\r\n     \r\n     useEffect(()=>dispatch(contactsOperations.fetchContacts()),[dispatch]);\r\n return (<>\r\n      <h1>Phonebook</h1>\r\n      <Form/> \r\n      <Filter/>\r\n      <h2>Contacts</h2>\r\n      <PersonEditor /> \r\n      </>)\r\n\r\n\r\n\r\n }\r\n\r\n\r\n\r\nexport default ContactsView;","import React from 'react';\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport {  useSelector } from 'react-redux';\r\nimport authSelectors from '../redux/auth/auth-selectors';\r\n\r\n/**\r\n * - Если маршрут приватный и пользователь залогинен, рендерит компонент\r\n * - В противном случае рендерит Redirect на /login\r\n */\r\nfunction PrivateRoute({children,...routeProps}){\r\n  const isLoggedIn=useSelector(authSelectors.getIsLoggedIn)\r\n  return <Route {...routeProps}>{\r\n    isLoggedIn?children:<Redirect to =\"/login\"/>}</Route>\r\n} \r\n\r\nexport default PrivateRoute;","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport authSelectors from '../redux/auth/auth-selectors';\r\n\r\n/**\r\n * - Если маршрут ограниченный, и пользователь залогинен, рендерит редирект на /todos\r\n * - В противном случае рендерит компонент\r\n */\r\nfunction PublicRoute({\r\n  children,\r\n  restricted=false,\r\n  ...routeProps}){\r\n  const isLoggedIn=useSelector(authSelectors.getIsLoggedIn);\r\n  const shoulRedirect=isLoggedIn&&restricted\r\n  return<Route {...routeProps}>{shoulRedirect?<Redirect to=\"/contacts\"/>:children}</Route>\r\n}\r\n\r\nexport default PublicRoute;","\r\nimport contactsSelector from './redux/contacts/contacts-selectors'\r\nimport {connect, useDispatch, useSelector} from 'react-redux'\r\nimport actions from './redux/contacts/actions';\r\nimport { Switch } from 'react-router-dom';\r\nimport AppBar from './components/AppBar/AppBar';\r\nimport LoginView from './components/AppBar/LoginView';\r\nimport RegisterView from './components/AppBar/RegisterView';\r\nimport ContactsView from './components/AppBar/ContactsView';\r\nimport { useEffect } from 'react';\r\nimport operations from './redux/auth/auth-operations'\r\nimport PrivateRoute from './components/PrivateRoute';\r\nimport PublicRoute from './components/PublicRoute';\r\nimport authSelectors from './redux/auth/auth-selectors'\r\n\r\n\r\n\r\nfunction App({formSubmitHandler,getVisibleContacts,deleteContacts}){\r\n  const dispatch= useDispatch();\r\n  const isRefreshing=useSelector(authSelectors.getIsRefreshing);\r\n  useEffect(()=>{dispatch(operations.getCurrentUser())},\r\n  [dispatch]);\r\n  return(\r\n    !isRefreshing &&\r\n    <><AppBar/>\r\n      <Switch>\r\n       <PublicRoute exact path='/register' restricted><RegisterView/></PublicRoute>\r\n       <PublicRoute exact path='/login'restricted><LoginView/></PublicRoute>           \r\n       <PrivateRoute path='/contacts'><ContactsView/></PrivateRoute>\r\n      </Switch> \r\n    </>\r\n    \r\n)\r\n}\r\nconst mapStateToProps=state=>{\r\n  return {\r\n    items:contactsSelector.getItems(state),\r\n    filter:contactsSelector.getFilter(state)\r\n  }\r\n}\r\nconst mapDispatchToProps=dispatch=>{\r\n  return{\r\n    formSubmitHandler:value=> dispatch(actions.addContacts(value)),\r\n    getVisibleContacts:value=>dispatch(actions.filterContacts(value)),\r\n    deleteContacts:id=>dispatch(actions.deleteContacts(id)),\r\n    \r\n    \r\n\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(App);\r\n","import {combineReducers} from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport a from './actions';\r\n//import oper from './contacts-operations'\r\n\r\nconst entities=createReducer([], \r\n  {\r\n    [a.fetchContactsSuccess]:(_,{payload})=>payload,\r\n    [a.addContactSuccess]:(state,{payload})=>[...state,payload],\r\n    [a.deleteContactSuccess]:(state,{payload})=>state.filter(({ id }) => id !== payload),\r\n    /* [oper.addContact]:(state,{payload})=>{\r\n      const user = state.find(user => user.name === payload.name);\r\n      if (user){console.log(user);return [state]} return [...state,payload]\r\n    } */\r\n\r\n  })\r\nconst isLoading=createReducer(false,{\r\n  [a.fetchContactsRequest]: () => true,\r\n  [a.fetchContactsSuccess]: () => false,\r\n  [a.fetchContactsError]: () => false,\r\n  [a.addContactRequest]: () => true,\r\n  [a.addContactSuccess]: () => false,\r\n  [a.addContactError]: () => false,\r\n  [a.deleteContactRequest]: () => true,\r\n  [a.deleteContactSuccess]: () => false,\r\n  [a.deleteContactError]: () => false,\r\n\r\n\r\n})\r\n\r\nconst error = createReducer(null, {\r\n  [a.fetchContactsRequest]: () => null,\r\n  [a.fetchContactsError]: () => null,\r\n});\r\n\r\nconst filterReducer=createReducer('', {\r\n  [a.changeFilterContacts]:(_,{payload})=>payload,\r\n})\r\n\r\nexport default combineReducers({\r\n    items:combineReducers({\r\n      entities,\r\n      isLoading,\r\n      error\r\n    }),\r\n    filter:filterReducer,\r\n});","import { createSlice } from \"@reduxjs/toolkit\";\r\nimport authOperations from './auth-operations'\r\nconst initialState={\r\n    user:{name:null, email:null},\r\n    token:null,\r\n    isLoggedIn:false,\r\n    isRefreshing:false\r\n     \r\n};\r\nconst authSlice=createSlice({\r\n    name:'auth',\r\n    initialState,\r\n    extraReducers:{\r\n        [authOperations.register.fulfilled](state,action){\r\n            state.user=action.payload.user;\r\n            state.token=action.payload.token;\r\n            state.isLoggedIn=true;\r\n\r\n        },\r\n        [authOperations.logIn.fulfilled](state,action){\r\n            state.user=action.payload.user;\r\n            state.token=action.payload.token;\r\n            state.isLoggedIn=true;\r\n\r\n        },\r\n        [authOperations.logOut.fulfilled](state){\r\n            state.user={name:null, email:null};\r\n            state.token=null;\r\n            state.isLoggedIn=false;\r\n\r\n        },\r\n        [authOperations.getCurrentUser.pending](state,action){\r\n            state.isRefreshing=true;\r\n        },\r\n        [authOperations.getCurrentUser.fulfilled](state,action){\r\n            state.user={...action.payload};\r\n            state.isLoggedIn=true;\r\n            state.isRefreshing=false;\r\n        },[authOperations.getCurrentUser.rejected](state,action){\r\n            state.isRefreshing=false;\r\n        }\r\n    },\r\n});\r\nexport default authSlice.reducer;","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\n// import logger from 'redux-logger';\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\nimport  contactsReducer from './contacts/contactsReduser';\r\nimport  authReducer from './auth/auth-slice';\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n  // logger,\r\n];\r\n\r\nconst authPersistConfig = {\r\n  key: 'auth',\r\n  storage,\r\n  whitelist: ['token'],\r\n};\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    auth: persistReducer(authPersistConfig, authReducer),\r\n    contacts: contactsReducer,\r\n  },\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === 'development',\r\n});\r\n\r\nconst persistor = persistStore(store);\r\nconst storePersistor={ store, persistor }\r\nexport default storePersistor;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport { PersistGate } from 'redux-persist/integration/react';\r\nimport './index.css';\r\nimport App from './App';\r\nimport s from './redux/store'\r\nimport {Provider} from 'react-redux'\r\n\r\nconsole.log(s.store);\r\nconsole.log(s.store.getState());\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={s.store}>\r\n    <PersistGate loading={null} persistor={s.persistor}>\r\n      <BrowserRouter>\r\n    <App />\r\n    </BrowserRouter>\r\n    </PersistGate>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n\r\n"],"sourceRoot":""}